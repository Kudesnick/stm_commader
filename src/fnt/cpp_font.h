/***************************************************************************************************
 *   Project:     
 *   Author:        Stulov Tikhon (kudesnick@inbox.ru)
 ***************************************************************************************************
 *   Distribution:  
 *
 ***************************************************************************************************
 *   MCU Family:    STM32F
 *   Compiler:      ARMCC
 ***************************************************************************************************
 *   File:          font.h
 *   Description:   
 *
 ***************************************************************************************************
 *   History:       21.04.2019 - file created
 *
 **************************************************************************************************/

#pragma once

/***************************************************************************************************
 *                                      INCLUDED FILES
 **************************************************************************************************/

#include <stdint.h>
#include <string.h>
#include "bsp_ili9341.h"

/***************************************************************************************************
 *                                       DEFINITIONS
 **************************************************************************************************/

/***************************************************************************************************
 *                                      PUBLIC TYPES
 **************************************************************************************************/

namespace font
{

typedef enum : uint8_t
{
    BLACK_D   = 0,
    BLUE_D    = 1,
    RED_D     = 2,
    MAGENTA_D = 3,
    GREEN_D   = 4,
    CYAN_D    = 5,
    YELLOW_D  = 6,
    WHITE_D   = 7,
    BLACK   = 8 + 0,
    BLUE    = 8 + 1,
    RED     = 8 + 2,
    MAGENTA = 8 + 3,
    GREEN   = 8 + 4,
    CYAN    = 8 + 5,
    YELLOW  = 8 + 6,
    WHITE   = 8 + 7,
} color_t;

typedef struct
{
    uint8_t height_glyph,
            width_glyph,
            start_code,
            end_code,
            glyph_size;    
}font_attr_t;

typedef struct
{
    const font_attr_t attr;
    const uint8_t * p_font;
}font_t;

typedef struct
{
    color_t txt;
    color_t bg;
} brush_t;

class cpp_font
{
protected:
    const font_t * const font_;
    brush_t brush_;
public:
    cpp_font(const font_t&);
    void set_brush(const brush_t&);
    uint8_t draw(const uint16_t, const uint16_t, const char * const, const uint8_t);
};

ili9341::color_t color_converter(const font::color_t &_color);

}; // namespace font

/***************************************************************************************************
 *                               PRIVATE FUNCTION PROTOTYPES
 **************************************************************************************************/

/***************************************************************************************************
 *                                       PRIVATE DATA
 **************************************************************************************************/

/***************************************************************************************************
 *                                       PUBLIC DATA
 **************************************************************************************************/

/***************************************************************************************************
 *                              PUBLIC FUNCTION PROTOTYPES
 **************************************************************************************************/

/***************************************************************************************************
 *                                      EXTERNAL DATA
 **************************************************************************************************/

/***************************************************************************************************
 *                              EXTERNAL FUNCTION PROTOTYPES
 **************************************************************************************************/

/***************************************************************************************************
 *                                    PRIVATE FUNCTIONS
 **************************************************************************************************/

/***************************************************************************************************
 *                                    PUBLIC FUNCTIONS
 **************************************************************************************************/

/***************************************************************************************************
 *                                       END OF FILE
 **************************************************************************************************/
