/***************************************************************************************************
 *   Project:     
 *   Author:        Stulov Tikhon (kudesnick@inbox.ru)
 ***************************************************************************************************
 *   Distribution:  
 *
 ***************************************************************************************************
 *   MCU Family:    STM32F
 *   Compiler:      ARMCC
 ***************************************************************************************************
 *   File:          font.c
 *   Description:   
 *
 ***************************************************************************************************
 *   History:       21.04.2019 - file created
 *
 **************************************************************************************************/

/***************************************************************************************************
 *                                      INCLUDED FILES
 **************************************************************************************************/

#include "cpp_terminal.h"
#include "bsp_ili9341.h"

/***************************************************************************************************
 *                                       DEFINITIONS
 **************************************************************************************************/

#define TAB_SIZE 4

/***************************************************************************************************
 *                                      PUBLIC TYPES
 **************************************************************************************************/

/***************************************************************************************************
 *                               PRIVATE FUNCTION PROTOTYPES
 **************************************************************************************************/

/***************************************************************************************************
 *                                       PRIVATE DATA
 **************************************************************************************************/

/***************************************************************************************************
 *                                       PUBLIC DATA
 **************************************************************************************************/

/***************************************************************************************************
 *                              PUBLIC FUNCTION PROTOTYPES
 **************************************************************************************************/

/***************************************************************************************************
 *                                      EXTERNAL DATA
 **************************************************************************************************/

/***************************************************************************************************
 *                              EXTERNAL FUNCTION PROTOTYPES
 **************************************************************************************************/

/***************************************************************************************************
 *                                    PRIVATE FUNCTIONS
 **************************************************************************************************/

/***************************************************************************************************
 *                                    PUBLIC FUNCTIONS
 **************************************************************************************************/

namespace terminal
{

cpp_terminal::cpp_terminal(
    const uint16_t _x,
    const uint16_t _y,
    const uint8_t _height,
    const uint8_t _width,
    const font::font_t& _font,
    char * const _buffer,
    uint16_t _buf_size):
    
    win_crd_({_x, _y}),
    win_size_({_height, _width}),
    cpp_font(_font),
    p_buf_(_buffer),
    buf_size_(_buf_size)
{
    clear();
};

void cpp_terminal::clear(void)
{
    buf_ptr_ = scroll_ptr_ = 0;
    cursor_ = {0, 0};
    
    ili9341::rect_t rect =
    {
        .x1 = win_crd_.x,
        .y1 = win_crd_.y,
        .x2 = win_crd_.x,
        .y2 = win_crd_.y,
    };
    
    rect.x2 += win_size_.x * font_->attr.height_glyph - 1;
    rect.y2 += win_size_.y * font_->attr.width_glyph - 1;
    
    ili9341::fill_rect(&rect, color_converter(brush_.bg));
};

void cpp_terminal::print(const char * const _str)
{
    if (_str == NULL) return;
    
    const char * str = _str;
    uint16_t len = strlen(_str);
    
    while(len > 0)
    {
        uint8_t print_len = 1;
        
        switch (str[0])
        {
            case '\a': // BELL
            {
                // TO_DO beep
            }
            break;
            
            case '\b': // BACKSPACE
            {
                if (cursor_.y > 0)
                {
                    cursor_.y--;
                }
                else if (cursor_.x > 0)
                {
                    cursor_.x--;
                    cursor_.y = win_size_.y - 1;
                }
                
                draw(win_crd_.x + cursor_.x * font_->attr.height_glyph,
                    win_crd_.y + cursor_.y * font_->attr.width_glyph,
                    " ", 1);
            }
            break;
                
            case '\t': // CHARACTER TABULATION 
            {
                cursor_.y = cursor_.y / TAB_SIZE + 1;
                cursor_.y *= TAB_SIZE;
            }
            break;

            case '\n': // LINE FEED
            case '\v': // LINE TABULATION 
            {
                cursor_.x++;
            }
            break;
            
            case '\f': // FORM FEED
            {
                clear();
            }
            break;

            case '\r': // CARRIAGE RETURN
            {
                cursor_.y = 0;
            }
            break;
                        
            default:
            {
                print_len = win_size_.y - cursor_.y;
                
                print_len = draw(win_crd_.x + cursor_.x * font_->attr.height_glyph,
                    win_crd_.y + cursor_.y * font_->attr.width_glyph,
                    str, print_len);
                
                // Перевод курсора
                cursor_.y += print_len;
                
                // Если ничего не напечатали - значит непечатный символ, который не был обработан выше
                if (print_len == 0) print_len = 1;
            }
            break;
        }
        
        // Переводим указатель
        str += print_len;
        len -= print_len;

        if (cursor_.y >= win_size_.y)
        {
            cursor_.y = 0;
            cursor_.x++;
        }

        if (cursor_.x >= win_size_.x)
        {
            // TO_DO реализовать прокручивание экрана
        }
        
        // TO_DO реализовать работу с буфером
    };
};

void cpp_terminal::set_brush(const font::brush_t &_brush)
{
    brush_ = _brush;
}

}; // namespace terminal

/***************************************************************************************************
 *                                       END OF FILE
 **************************************************************************************************/
